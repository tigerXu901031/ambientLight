C166 COMPILER V7.00, MAIN                                                                  06/30/2019 20:28:29 PAGE 1   


C166 COMPILER V7.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Program Files\Keil4Inf\C166\BIN\C166.EXE main.c MODV2 BROWSE MODV2 DEBUG

 stmt lvl     source

    1         //****************************************************************************
    2         // @Module        Project Settings
    3         // @Filename      main.c
    4         // @Project       bswCodeGenConfigPrj.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon XC2267-96F80
    7         //
    8         // @Compiler      Keil
    9         //
   10         // @Codegenerator 2.2
   11         //
   12         // @Description   This file contains the project initialization function.
   13         //
   14         //----------------------------------------------------------------------------
   15         // @Date          2019/6/30 19:43:29
   16         //
   17         //****************************************************************************
   18         
   19         // USER CODE BEGIN (MAIN_General,1)
   20         
   21         // USER CODE END
   22         
   23         
   24         
   25         //****************************************************************************
   26         // @Project Includes
   27         //****************************************************************************
   28         
   29         #include "main.h"
   30         
   31         // USER CODE BEGIN (MAIN_General,2)
   32         
   33         // USER CODE END
   34         
   35         
   36         //****************************************************************************
   37         // @Macros
   38         //****************************************************************************
   39         
   40         // USER CODE BEGIN (MAIN_General,3)
   41         
   42         // USER CODE END
   43         
   44         
   45         //****************************************************************************
   46         // @Defines
   47         //****************************************************************************
   48         
   49         // USER CODE BEGIN (MAIN_General,4)
   50         
   51         // USER CODE END
   52         
   53         
   54         //****************************************************************************
   55         // @Typedefs
C166 COMPILER V7.00, MAIN                                                                  06/30/2019 20:28:29 PAGE 2   

   56         //****************************************************************************
   57         
   58         // USER CODE BEGIN (MAIN_General,5)
   59         
   60         // USER CODE END
   61         
   62         
   63         //****************************************************************************
   64         // @Imported Global Variables
   65         //****************************************************************************
   66         
   67         // USER CODE BEGIN (MAIN_General,6)
   68         
   69         // USER CODE END
   70         
   71         
   72         //****************************************************************************
   73         // @Global Variables
   74         //****************************************************************************
   75         
   76         // USER CODE BEGIN (MAIN_General,7)
   77         
   78         // USER CODE END
   79         
   80         
   81         //****************************************************************************
   82         // @External Prototypes
   83         //****************************************************************************
   84         
   85         // USER CODE BEGIN (MAIN_General,8)
   86         
   87         // USER CODE END
   88         
   89         
   90         //****************************************************************************
   91         // @Prototypes Of Local Functions
   92         //****************************************************************************
   93         
   94         // USER CODE BEGIN (MAIN_General,9)
   95         
   96         // USER CODE END
   97         
   98         
   99         //****************************************************************************
  100         // @Function      void MAIN_vInit(void) 
  101         //
  102         //----------------------------------------------------------------------------
  103         // @Description   This function initializes the microcontroller.
  104         //
  105         //----------------------------------------------------------------------------
  106         // @Returnvalue   None
  107         //
  108         //----------------------------------------------------------------------------
  109         // @Parameters    None
  110         //
  111         //----------------------------------------------------------------------------
  112         // @Date          2019/6/30
  113         //
  114         //****************************************************************************
  115         
  116         // USER CODE BEGIN (Init,1)
  117         
C166 COMPILER V7.00, MAIN                                                                  06/30/2019 20:28:29 PAGE 3   

  118         // USER CODE END
  119         
  120         void MAIN_vInit(void)
  121         {
  122  1        // USER CODE BEGIN (Init,2)
  123  1      
  124  1        // USER CODE END
  125  1      
  126  1        //   globally disable interrupts
  127  1        PSW_IEN        =  0;          
  128  1      
  129  1      
  130  1        ///  -----------------------------------------------------------------------
  131  1        ///  Configuration of the System Clock:
  132  1        ///  -----------------------------------------------------------------------
  133  1        ///  - VCO clock used, input clock is connected
  134  1        ///  - input frequency is 8.00 MHz
  135  1        ///  - system clock is 80.00 MHz
  136  1      
  137  1        MAIN_vUnlockProtecReg();     // unlock write security
  138  1      
  139  1        MAIN_vChangeFreq();          // load PLL control register
  140  1      
  141  1        //   -----------------------------------------------------------------------
  142  1        //   Initialization of the Peripherals:
  143  1        //   -----------------------------------------------------------------------
  144  1      
  145  1        //   initializes the Capture / Compare Unit 60 (CCU60)
  146  1        CCU60_vInit();
  147  1      
  148  1      
  149  1        //   -----------------------------------------------------------------------
  150  1        //   Initialization of the Bank Select registers:
  151  1        //   -----------------------------------------------------------------------
  152  1      
  153  1      
  154  1        // USER CODE BEGIN (Init,3)
  155  1      
  156  1        // USER CODE END
  157  1      
  158  1        MAIN_vLockProtecReg();       // lock write security
  159  1      
  160  1        //   globally enable interrupts
  161  1        PSW_IEN        =  1;          
  162  1      
  163  1      } //  End of function MAIN_vInit
  164         
  165         
  166         //****************************************************************************
  167         // @Function      void MAIN_vUnlockProtecReg(void) 
  168         //
  169         //----------------------------------------------------------------------------
  170         // @Description   This function makes it possible to write one protected 
  171         //                register.
  172         //
  173         //----------------------------------------------------------------------------
  174         // @Returnvalue   None
  175         //
  176         //----------------------------------------------------------------------------
  177         // @Parameters    None
  178         //
  179         //----------------------------------------------------------------------------
C166 COMPILER V7.00, MAIN                                                                  06/30/2019 20:28:29 PAGE 4   

  180         // @Date          2019/6/30
  181         //
  182         //****************************************************************************
  183         
  184         // USER CODE BEGIN (UnlockProtecReg,1)
  185         
  186         // USER CODE END
  187         
  188         void MAIN_vUnlockProtecReg(void)
  189         {
  190  1        uword uwPASSWORD;
  191  1      
  192  1          SCU_SLC = 0xAAAA;                   // command 0
  193  1          SCU_SLC = 0x5554;                   // command 1
  194  1      
  195  1          uwPASSWORD = SCU_SLS & 0x00FF;
  196  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  197  1      
  198  1          SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
  199  1          SCU_SLC = 0x0000;                   // command 3
  200  1      
  201  1      } //  End of function MAIN_vUnlockProtecReg
  202         
  203         
  204         //****************************************************************************
  205         // @Function      void MAIN_vLockProtecReg(void) 
  206         //
  207         //----------------------------------------------------------------------------
  208         // @Description   This function makes it possible to lock one protected 
  209         //                register.
  210         //
  211         //----------------------------------------------------------------------------
  212         // @Returnvalue   None
  213         //
  214         //----------------------------------------------------------------------------
  215         // @Parameters    None
  216         //
  217         //----------------------------------------------------------------------------
  218         // @Date          2019/6/30
  219         //
  220         //****************************************************************************
  221         
  222         // USER CODE BEGIN (LockProtecReg,1)
  223         
  224         // USER CODE END
  225         
  226         void MAIN_vLockProtecReg(void)
  227         {
  228  1        uword uwPASSWORD;
  229  1      
  230  1          SCU_SLC = 0xAAAA;                   // command 0
  231  1          SCU_SLC = 0x5554;                   // command 1
  232  1      
  233  1          uwPASSWORD = SCU_SLS & 0x00FF;
  234  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  235  1      
  236  1          SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
  237  1          SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
  238  1      
  239  1          uwPASSWORD = SCU_SLS & 0x00FF;
  240  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  241  1          SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
C166 COMPILER V7.00, MAIN                                                                  06/30/2019 20:28:29 PAGE 5   

  242  1      
  243  1      } //  End of function MAIN_vLockProtecReg
  244         
  245         
  246         //****************************************************************************
  247         // @Function      void MAIN_vChangeFreq(void) 
  248         //
  249         //----------------------------------------------------------------------------
  250         // @Description   This function is used to select the external crystal and
  251         //                configure the system frequency to 80Mhz/66Mhz.
  252         //
  253         //----------------------------------------------------------------------------
  254         // @Returnvalue   None
  255         //
  256         //----------------------------------------------------------------------------
  257         // @Parameters    None
  258         //
  259         //----------------------------------------------------------------------------
  260         // @Date          2019/6/30
  261         //
  262         //****************************************************************************
  263         
  264         // USER CODE BEGIN (ChangeFreq,1)
  265         
  266         // USER CODE END
  267         
  268         void MAIN_vChangeFreq(void)
  269         {
  270  1        SCS_SwitchToHighPrecBandgap();
  271  1      
  272  1        //For application and internal application resets, the complete PLL configuration could be avoided
  273  1        //The entry from application resets and internal application reset is covered in the following different
             -iation
  274  1        //in int/ext clock in lock/unlocked state.
  275  1      
  276  1        if  ((SCU_PLLSTAT & 0x0004) == 0x0004)             // fR derived from Internal clock
  277  1              {
  278  2                  //Normal startup state during boot and the clock
  279  2                  //has to be in the next step configured on the external crystal
  280  2                  //use XTAL/VCO, count XTAL clock
  281  2      
  282  2                  SCS_StartXtalOsc(1);                     // Starts the crystal oscillator
  283  2                  SCS_SwitchSystemClock(1);                // System clock is increased to target speed (80/66 M
             -Hz)
  284  2      
  285  2              }
  286  1      
  287  1        else                                               // fR derived from external crystal clock
  288  1              {
  289  2                  if ((SCU_PLLSTAT & 0x1009) == 0x1009)    // fR derived from external crystal clock + VCO is lo
             -cked
  290  2                  {
  291  3                     //usually after an application reset where clock need not be configured again.
  292  3                     //check K2/P/N values and decide whether these values have to be adapted based on applicati
             -on needs.
  293  3                     NOP();
  294  3                     //usually the PLL losss of Lock TRAP schould be enabled here.
  295  3                  }
  296  2                  else                                     //fR derived from external crystal clock + VCO is not
             - locked
  297  2      
  298  2                  {
C166 COMPILER V7.00, MAIN                                                                  06/30/2019 20:28:29 PAGE 6   

  299  3                     //estimate the K1 value and the current frequency
  300  3                     //reduce K2/P/N values in steps so that the frequency
  301  3                     //jumps is limited to 20MHz or factor of 5 whichever is minimum
  302  3                     NOP();
  303  3                  }
  304  2      
  305  2      
  306  2              }
  307  1      
  308  1      } //  End of function MAIN_vChangeFreq
  309         
  310         
  311         //****************************************************************************
  312         // @Function      void main(void) 
  313         //
  314         //----------------------------------------------------------------------------
  315         // @Description   This is the main function.
  316         //
  317         //----------------------------------------------------------------------------
  318         // @Returnvalue   None
  319         //
  320         //----------------------------------------------------------------------------
  321         // @Parameters    None
  322         //
  323         //----------------------------------------------------------------------------
  324         // @Date          2019/6/30
  325         //
  326         //****************************************************************************
  327         
  328         // USER CODE BEGIN (Main,1)
  329         
  330         // USER CODE END
  331         
  332         void main(void)
  333         {
  334  1        // USER CODE BEGIN (Main,2)
  335  1      
  336  1        // USER CODE END
  337  1      
  338  1        MAIN_vInit();
  339  1      
  340  1        // USER CODE BEGIN (Main,3)
  341  1      
  342  1        // USER CODE END
  343  1      
  344  1        while(1)
  345  1        {
  346  2      
  347  2         // USER CODE BEGIN (Main,4)
  348  2      
  349  2         // USER CODE END
  350  2      
  351  2        }
  352  1      
  353  1      } //  End of function main
  354         
  355         
  356         
  357         // USER CODE BEGIN (MAIN_General,10)
  358         
  359         // USER CODE END
  360         
C166 COMPILER V7.00, MAIN                                                                  06/30/2019 20:28:29 PAGE 7   



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         192     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
